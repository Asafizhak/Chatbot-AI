name: Deploy ChatBot AI to AKS

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

env:
  ACR_NAME: acrmsassignment2025
  ACR_LOGIN_SERVER: acrmsassignment2025.azurecr.io
  AKS_CLUSTER_NAME: aks-demo-cluster
  AKS_RESOURCE_GROUP: rg-acr-demo
  APP_NAME: chatbot-ai
jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: secret
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: 🔐 Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 🐳 Build and push to ACR
        run: |
          az acr login --name ${{ env.ACR_NAME }}
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/${{ env.APP_NAME }}:${{ github.sha }} .
          docker push ${{ env.ACR_LOGIN_SERVER }}/${{ env.APP_NAME }}:${{ github.sha }}

      - name: 🔧 Install kubelogin
        run: |
          # Download and install kubelogin
          curl -LO https://github.com/Azure/kubelogin/releases/download/v0.0.32/kubelogin-linux-amd64.zip
          unzip kubelogin-linux-amd64.zip
          sudo mv bin/linux_amd64/kubelogin /usr/local/bin/
          chmod +x /usr/local/bin/kubelogin

      - name: 🎯 Get AKS credentials
        run: |
          az aks get-credentials --resource-group ${{ env.AKS_RESOURCE_GROUP }} --name ${{ env.AKS_CLUSTER_NAME }} --admin --overwrite-existing

      - name: 🚀 Deploy to AKS
        run: |
          # Create namespace if it doesn't exist
          kubectl create namespace chatbot-ai --dry-run=client -o yaml | kubectl apply -f -
          
          # Create ingress-nginx namespace if it doesn't exist
          kubectl create namespace ingress-nginx --dry-run=client -o yaml | kubectl apply -f -
          
          # Create/Update Kubernetes secrets for AWS Bedrock
          kubectl create secret generic aws-bedrock-secrets \
            --from-literal=AWS_ACCESS_KEY="${{ secrets.AWS_ACCESS_KEY }}" \
            --from-literal=AWS_SECRET_KEY="${{ secrets.AWS_SECRET_KEY }}" \
            --from-literal=AWS_REGION="${{ secrets.AWS_REGION }}" \
            --from-literal=MODEL_ID="${{ secrets.MODEL_ID }}" \
            --from-literal=SYSTEM_PROMPT="${{ secrets.SYSTEM_PROMPT }}" \
            --namespace=chatbot-ai \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # Update deployment with image tag
          sed -i "s|IMAGE_TAG|${{ github.sha }}|g" k8s/deployment.yaml
          sed -i "s|ACR_NAME|${{ env.ACR_NAME }}|g" k8s/deployment.yaml
          
          # Apply all configurations
          kubectl apply -f k8s/ --namespace=chatbot-ai --validate=false
          
          # Check NGINX Ingress Controller namespace and status
          echo "🔍 Checking NGINX Ingress Controller..."
          kubectl get pods -n ingress-nginx
          kubectl get svc -n ingress-nginx
          
          # Clean up any duplicate LoadBalancer in wrong namespace
          if kubectl get svc nginx-ingress-loadbalancer -n nginx-ingress >/dev/null 2>&1; then
            echo "🧹 Removing duplicate LoadBalancer from wrong namespace..."
            kubectl delete svc nginx-ingress-loadbalancer -n nginx-ingress
          fi
          
          # Apply NGINX LoadBalancer only if it doesn't exist (prevent duplicates)
          if ! kubectl get svc nginx-ingress-loadbalancer -n ingress-nginx >/dev/null 2>&1; then
            echo "🔧 Creating NGINX LoadBalancer service..."
            kubectl apply -f k8s/nginx-loadbalancer.yaml
          else
            echo "✅ NGINX LoadBalancer service already exists, skipping creation"
            kubectl get svc nginx-ingress-loadbalancer -n ingress-nginx
          fi
          
          # Check rollout status
          kubectl rollout status deployment/${{ env.APP_NAME }} -n chatbot-ai --timeout=600s
          
          # Verify ingress deployment
          kubectl get ingress -n chatbot-ai
          
          # Verify LoadBalancer has endpoints
          echo "🔍 Checking LoadBalancer endpoints..."
          kubectl get endpoints nginx-ingress-loadbalancer -n ingress-nginx
          
          # Display service information
          echo "🌐 Service Details:"
          kubectl get services -n chatbot-ai
          
          # Display stable LoadBalancer IP
          echo "🌐 LoadBalancer Service Details:"
          kubectl get svc nginx-ingress-loadbalancer -n ingress-nginx
          
          # Extract and display the external IP for easy reference
          EXTERNAL_IP=$(kubectl get svc nginx-ingress-loadbalancer -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [ ! -z "$EXTERNAL_IP" ]; then
            echo "🎯 Your stable LoadBalancer IP: $EXTERNAL_IP"
            echo "📝 Update your hosts file with: $EXTERNAL_IP chatbot-ai.local"
            echo "🌐 Access your ChatBot AI at: http://chatbot-ai.local or http://$EXTERNAL_IP"
          else
            echo "⏳ LoadBalancer IP is still being assigned."
          fi
          
          echo "✅ ChatBot AI deployment completed successfully!!"